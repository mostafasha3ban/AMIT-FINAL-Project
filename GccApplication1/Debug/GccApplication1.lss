
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000012e8  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800062  00800062  0000137e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003731  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca9  00000000  00000000  00004dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bef  00000000  00000000  00005a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  00007648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000746  00000000  00000000  00007c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000210a  00000000  00000000  0000835e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	3b 03       	fmul	r19, r19
      56:	4c 03       	fmul	r20, r20
      58:	5d 03       	fmul	r21, r21
      5a:	6e 03       	fmul	r22, r22
      5c:	7f 03       	fmul	r23, r23
      5e:	90 03       	fmuls	r17, r16
      60:	a1 03       	fmuls	r18, r17
      62:	b2 03       	fmuls	r19, r18
      64:	c3 03       	fmuls	r20, r19
      66:	d4 03       	fmuls	r21, r20
      68:	fc 03       	fmulsu	r23, r20
      6a:	0d 04       	cpc	r0, r13
      6c:	1e 04       	cpc	r1, r14
      6e:	2f 04       	cpc	r2, r15
      70:	40 04       	cpc	r4, r0
      72:	51 04       	cpc	r5, r1
      74:	62 04       	cpc	r6, r2
      76:	73 04       	cpc	r7, r3
      78:	84 04       	cpc	r8, r4
      7a:	95 04       	cpc	r9, r5
      7c:	e2 04       	cpc	r14, r2
      7e:	e8 04       	cpc	r14, r8
      80:	ee 04       	cpc	r14, r14
      82:	f4 04       	cpc	r15, r4
      84:	fa 04       	cpc	r15, r10
      86:	00 05       	cpc	r16, r0
      88:	06 05       	cpc	r16, r6
      8a:	0c 05       	cpc	r16, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e8 ee       	ldi	r30, 0xE8	; 232
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 36       	cpi	r26, 0x62	; 98
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a2 e6       	ldi	r26, 0x62	; 98
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 38       	cpi	r26, 0x83	; 131
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 99 01 	call	0x332	; 0x332 <main>
      c2:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <__vector_1>:
			}
		}
	}

ISR(INT0_vect)			//Uses push button 2 as interrupt button to turn heater ON/OFF
{	if(On_Off == ON)
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	8f 93       	push	r24
      d6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <On_Off>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	19 f4       	brne	.+6      	; 0xe4 <__vector_1+0x1a>
		On_Off = OFF;
      de:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <On_Off>
      e2:	03 c0       	rjmp	.+6      	; 0xea <__vector_1+0x20>
	else{
		On_Off = ON;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <On_Off>
	}
}
      ea:	8f 91       	pop	r24
      ec:	0f 90       	pop	r0
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	0f 90       	pop	r0
      f2:	1f 90       	pop	r1
      f4:	18 95       	reti

000000f6 <__vector_11>:

ISR(TIMER0_OVF_vect){		//timer 0 flashes the seven segment every 1 second if set state is on
      f6:	1f 92       	push	r1
      f8:	0f 92       	push	r0
      fa:	0f b6       	in	r0, 0x3f	; 63
      fc:	0f 92       	push	r0
      fe:	11 24       	eor	r1, r1
     100:	2f 93       	push	r18
     102:	3f 93       	push	r19
     104:	4f 93       	push	r20
     106:	5f 93       	push	r21
     108:	6f 93       	push	r22
     10a:	7f 93       	push	r23
     10c:	8f 93       	push	r24
     10e:	9f 93       	push	r25
     110:	af 93       	push	r26
     112:	bf 93       	push	r27
     114:	ef 93       	push	r30
     116:	ff 93       	push	r31
	static u32 x;
	x++;
     118:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <x.1849>
     11c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <x.1849+0x1>
     120:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <x.1849+0x2>
     124:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <x.1849+0x3>
     128:	01 96       	adiw	r24, 0x01	; 1
     12a:	a1 1d       	adc	r26, r1
     12c:	b1 1d       	adc	r27, r1
     12e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <x.1849>
     132:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <x.1849+0x1>
     136:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <x.1849+0x2>
     13a:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <x.1849+0x3>
	if(x == num_of_ov){
     13e:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <num_of_ov>
     142:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <num_of_ov+0x1>
     146:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <num_of_ov+0x2>
     14a:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <num_of_ov+0x3>
     14e:	84 17       	cp	r24, r20
     150:	95 07       	cpc	r25, r21
     152:	a6 07       	cpc	r26, r22
     154:	b7 07       	cpc	r27, r23
     156:	99 f4       	brne	.+38     	; 0x17e <__vector_11+0x88>
	S_SEG_OFF();
     158:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <S_SEG_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	80 e7       	ldi	r24, 0x70	; 112
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	21 50       	subi	r18, 0x01	; 1
     164:	80 40       	sbci	r24, 0x00	; 0
     166:	90 40       	sbci	r25, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <__vector_11+0x6c>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <__vector_11+0x76>
     16c:	00 00       	nop
	_delay_ms(50);
	x = 0;	
     16e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <x.1849>
     172:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <x.1849+0x1>
     176:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <x.1849+0x2>
     17a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <x.1849+0x3>
	}
}
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	bf 91       	pop	r27
     184:	af 91       	pop	r26
     186:	9f 91       	pop	r25
     188:	8f 91       	pop	r24
     18a:	7f 91       	pop	r23
     18c:	6f 91       	pop	r22
     18e:	5f 91       	pop	r21
     190:	4f 91       	pop	r20
     192:	3f 91       	pop	r19
     194:	2f 91       	pop	r18
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <__vector_7>:

ISR(TIMER1_COMPA_vect){		//timer 1 turns the set state off after 5 seconds of inactivity
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	2f 93       	push	r18
     1ac:	3f 93       	push	r19
     1ae:	4f 93       	push	r20
     1b0:	5f 93       	push	r21
     1b2:	6f 93       	push	r22
     1b4:	7f 93       	push	r23
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	af 93       	push	r26
     1bc:	bf 93       	push	r27
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	TIMER_1_STOP();
     1c2:	0e 94 93 08 	call	0x1126	; 0x1126 <TIMER_1_STOP>
	TIMER_0_STOP();
     1c6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TIMER_0_STOP>
	Set_Temp_State = OFF;
     1ca:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Set_Temp_State>
}
     1ce:	ff 91       	pop	r31
     1d0:	ef 91       	pop	r30
     1d2:	bf 91       	pop	r27
     1d4:	af 91       	pop	r26
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	7f 91       	pop	r23
     1dc:	6f 91       	pop	r22
     1de:	5f 91       	pop	r21
     1e0:	4f 91       	pop	r20
     1e2:	3f 91       	pop	r19
     1e4:	2f 91       	pop	r18
     1e6:	0f 90       	pop	r0
     1e8:	0f be       	out	0x3f, r0	; 63
     1ea:	0f 90       	pop	r0
     1ec:	1f 90       	pop	r1
     1ee:	18 95       	reti

000001f0 <__vector_5>:

ISR(TIMER2_OVF_vect){		// timer 2 measure the temperature every 100 ms and find the average
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	5f 93       	push	r21
     202:	6f 93       	push	r22
     204:	7f 93       	push	r23
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	af 93       	push	r26
     20c:	bf 93       	push	r27
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
	static u32 y;
	y++;
     216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
     21a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
     21e:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
     222:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	a1 1d       	adc	r26, r1
     22a:	b1 1d       	adc	r27, r1
     22c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
     230:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
     234:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
     238:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
	if(y == num_of_ov_2){
     23c:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <num_of_ov_2>
     240:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <num_of_ov_2+0x1>
     244:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <num_of_ov_2+0x2>
     248:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <num_of_ov_2+0x3>
     24c:	84 17       	cp	r24, r20
     24e:	95 07       	cpc	r25, r21
     250:	a6 07       	cpc	r26, r22
     252:	b7 07       	cpc	r27, r23
     254:	91 f5       	brne	.+100    	; 0x2ba <__vector_5+0xca>
     256:	cc e6       	ldi	r28, 0x6C	; 108
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	25 e7       	ldi	r18, 0x75	; 117
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	fe 01       	movw	r30, r28
		for(int count=0;count<9;count++)
			Temp_Arr[count] = Temp_Arr[count+1];
     260:	81 81       	ldd	r24, Z+1	; 0x01
     262:	81 93       	st	Z+, r24

ISR(TIMER2_OVF_vect){		// timer 2 measure the temperature every 100 ms and find the average
	static u32 y;
	y++;
	if(y == num_of_ov_2){
		for(int count=0;count<9;count++)
     264:	e2 17       	cp	r30, r18
     266:	f3 07       	cpc	r31, r19
     268:	d9 f7       	brne	.-10     	; 0x260 <__vector_5+0x70>
			Temp_Arr[count] = Temp_Arr[count+1];
		Temp_Arr[9] = TEMP_S_READ();
     26a:	0e 94 c0 04 	call	0x980	; 0x980 <TEMP_S_READ>
     26e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Temp_Arr+0x9>
     272:	46 e7       	ldi	r20, 0x76	; 118
     274:	50 e0       	ldi	r21, 0x00	; 0
		s16 sum = 0;
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
		for(int count =0;count<10;count++)
			sum+=Temp_Arr[count];
     27a:	29 91       	ld	r18, Y+
     27c:	82 0f       	add	r24, r18
     27e:	91 1d       	adc	r25, r1
     280:	27 fd       	sbrc	r18, 7
     282:	9a 95       	dec	r25
	if(y == num_of_ov_2){
		for(int count=0;count<9;count++)
			Temp_Arr[count] = Temp_Arr[count+1];
		Temp_Arr[9] = TEMP_S_READ();
		s16 sum = 0;
		for(int count =0;count<10;count++)
     284:	c4 17       	cp	r28, r20
     286:	d5 07       	cpc	r29, r21
     288:	c1 f7       	brne	.-16     	; 0x27a <__vector_5+0x8a>
			sum+=Temp_Arr[count];
		Current_Temp = sum/10;
     28a:	6a e0       	ldi	r22, 0x0A	; 10
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodhi4>
     292:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <Current_Temp>
		if(Current_Temp>99)
     296:	64 36       	cpi	r22, 0x64	; 100
     298:	24 f0       	brlt	.+8      	; 0x2a2 <__vector_5+0xb2>
			Current_Temp = 99;
     29a:	83 e6       	ldi	r24, 0x63	; 99
     29c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Current_Temp>
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <__vector_5+0xba>
		if(Current_Temp<0)
     2a2:	66 23       	and	r22, r22
     2a4:	14 f4       	brge	.+4      	; 0x2aa <__vector_5+0xba>
			Current_Temp = 0;
     2a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <Current_Temp>
		y=0;
     2aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     2ae:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     2b2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     2b6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
	}
}
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	bf 91       	pop	r27
     2c4:	af 91       	pop	r26
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	7f 91       	pop	r23
     2cc:	6f 91       	pop	r22
     2ce:	5f 91       	pop	r21
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <Led_Fun>:

void Led_Fun(void){				// this function turn on the appropriate LED in case of cooling or heating
	if(Current_Temp<Set_Temp-5){
     2e0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <Current_Temp>
     2e4:	02 2e       	mov	r0, r18
     2e6:	00 0c       	add	r0, r0
     2e8:	33 0b       	sbc	r19, r19
     2ea:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	ac 01       	movw	r20, r24
     2f2:	45 50       	subi	r20, 0x05	; 5
     2f4:	51 09       	sbc	r21, r1
     2f6:	24 17       	cp	r18, r20
     2f8:	35 07       	cpc	r19, r21
     2fa:	54 f4       	brge	.+20     	; 0x310 <Led_Fun+0x30>
		LED_TOGGLE(R_LED);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 96 02 	call	0x52c	; 0x52c <LED_TOGGLE>
		LED_ON(M_LED);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LED_ON>
		LED_OFF(L_LED);
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 81 02 	call	0x502	; 0x502 <LED_OFF>
     30e:	08 95       	ret
	}
	else{ if(Current_Temp>Set_Temp+5){
     310:	05 96       	adiw	r24, 0x05	; 5
     312:	82 17       	cp	r24, r18
     314:	93 07       	cpc	r25, r19
     316:	54 f4       	brge	.+20     	; 0x32c <Led_Fun+0x4c>
			LED_ON(R_LED);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LED_ON>
			LED_OFF(M_LED);
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 81 02 	call	0x502	; 0x502 <LED_OFF>
			LED_ON(L_LED);
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LED_ON>
     32a:	08 95       	ret
			}
			else
				LEDS_OFF();
     32c:	0e 94 a8 02 	call	0x550	; 0x550 <LEDS_OFF>
     330:	08 95       	ret

00000332 <main>:

void Led_Fun(void);

int main(void)
{
	EXTERNAL_INT_0_INIT();
     332:	0e 94 db 07 	call	0xfb6	; 0xfb6 <EXTERNAL_INT_0_INIT>
	S_SEG_INIT();
     336:	0e 94 de 02 	call	0x5bc	; 0x5bc <S_SEG_INIT>
	LED_INIT(L_LED);  // Cooling element ON indicator
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 57 02 	call	0x4ae	; 0x4ae <LED_INIT>
	LED_INIT(M_LED);  // Heating element ON indicator
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 57 02 	call	0x4ae	; 0x4ae <LED_INIT>
	LED_INIT(R_LED);  // Heating element LED blinks when heating is on and solid light when cooling is on
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	0e 94 57 02 	call	0x4ae	; 0x4ae <LED_INIT>
	P_B_INIT(P_B_0);  // P_B for decreasing temperature
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 b5 02 	call	0x56a	; 0x56a <P_B_INIT>
	P_B_INIT(P_B_1);  // P_B for increasing temperature
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	0e 94 b5 02 	call	0x56a	; 0x56a <P_B_INIT>
	TEMP_S_INIT();	  
     358:	0e 94 bd 04 	call	0x97a	; 0x97a <TEMP_S_INIT>
	TIMER_1_INIT();
     35c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TIMER_1_INIT>
	TIMER_1_SET_TIME(4000);
     360:	60 ea       	ldi	r22, 0xA0	; 160
     362:	7f e0       	ldi	r23, 0x0F	; 15
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 6d 08 	call	0x10da	; 0x10da <TIMER_1_SET_TIME>
	TIMER_0_INIT();
     36c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TIMER_0_INIT>
	TIMER_0_SET_TIME(750);
     370:	6e ee       	ldi	r22, 0xEE	; 238
     372:	72 e0       	ldi	r23, 0x02	; 2
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 f5 07 	call	0xfea	; 0xfea <TIMER_0_SET_TIME>
	TIMER_2_INIT();
     37c:	0e 94 a0 08 	call	0x1140	; 0x1140 <TIMER_2_INIT>
	TIMER_2_SET_TIME(100);
     380:	64 e6       	ldi	r22, 0x64	; 100
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 ad 08 	call	0x115a	; 0x115a <TIMER_2_SET_TIME>
	TIMER_2_START();
     38c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <TIMER_2_START>
	Set_Temp = 60;
     390:	8c e3       	ldi	r24, 0x3C	; 60
     392:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Set_Temp>
    while(1)
    {	if(On_Off == OFF){
     396:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <On_Off>
     39a:	81 11       	cpse	r24, r1
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <main+0x76>
			S_SEG_OFF();
     39e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <S_SEG_OFF>
			LEDS_OFF();
     3a2:	0e 94 a8 02 	call	0x550	; 0x550 <LEDS_OFF>
     3a6:	f7 cf       	rjmp	.-18     	; 0x396 <main+0x64>
		}	
		else{
			Led_Fun();
     3a8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Led_Fun>
			if(Set_Temp_State){
     3ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Set_Temp_State>
     3b0:	88 23       	and	r24, r24
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <main+0x84>
     3b4:	4c c0       	rjmp	.+152    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				S_SEG_DISPLAY(Set_Temp);
     3b6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     3ba:	0e 94 0c 03 	call	0x618	; 0x618 <S_SEG_DISPLAY>
				if(P_B_READ(P_B_0)){
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     3c4:	88 23       	and	r24, r24
     3c6:	f1 f0       	breq	.+60     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	81 ee       	ldi	r24, 0xE1	; 225
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	90 40       	sbci	r25, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x9c>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0xa6>
     3d8:	00 00       	nop
					_delay_ms(100);
					TIMER_1_RESET();
     3da:	0e 94 9d 08 	call	0x113a	; 0x113a <TIMER_1_RESET>
					while(P_B_READ(P_B_0)){
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <main+0xba>
						S_SEG_DISPLAY(Set_Temp);
     3e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     3e4:	0e 94 0c 03 	call	0x618	; 0x618 <S_SEG_DISPLAY>
						Led_Fun();}
     3e8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Led_Fun>
			if(Set_Temp_State){
				S_SEG_DISPLAY(Set_Temp);
				if(P_B_READ(P_B_0)){
					_delay_ms(100);
					TIMER_1_RESET();
					while(P_B_READ(P_B_0)){
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     3f2:	81 11       	cpse	r24, r1
     3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <main+0xae>
						S_SEG_DISPLAY(Set_Temp);
						Led_Fun();}
					if(Set_Temp >35)
     3f6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     3fa:	84 32       	cpi	r24, 0x24	; 36
     3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
						Set_Temp-=5;
     3fe:	85 50       	subi	r24, 0x05	; 5
     400:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Set_Temp>
					}
				if(P_B_READ(P_B_1)){
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     40a:	88 23       	and	r24, r24
     40c:	21 f2       	breq	.-120    	; 0x396 <main+0x64>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	81 ee       	ldi	r24, 0xE1	; 225
     412:	94 e0       	ldi	r25, 0x04	; 4
     414:	21 50       	subi	r18, 0x01	; 1
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	90 40       	sbci	r25, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
					_delay_ms(100);
					TIMER_1_RESET();
     420:	0e 94 9d 08 	call	0x113a	; 0x113a <TIMER_1_RESET>
					while(P_B_READ(P_B_1)){
     424:	06 c0       	rjmp	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
						S_SEG_DISPLAY(Set_Temp);
     426:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     42a:	0e 94 0c 03 	call	0x618	; 0x618 <S_SEG_DISPLAY>
						Led_Fun();}
     42e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Led_Fun>
						Set_Temp-=5;
					}
				if(P_B_READ(P_B_1)){
					_delay_ms(100);
					TIMER_1_RESET();
					while(P_B_READ(P_B_1)){
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     438:	81 11       	cpse	r24, r1
     43a:	f5 cf       	rjmp	.-22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
						S_SEG_DISPLAY(Set_Temp);
						Led_Fun();}
					if(Set_Temp<75)
     43c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     440:	8b 34       	cpi	r24, 0x4B	; 75
     442:	08 f0       	brcs	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	a8 cf       	rjmp	.-176    	; 0x396 <main+0x64>
						Set_Temp+=5;
     446:	8b 5f       	subi	r24, 0xFB	; 251
     448:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Set_Temp>
     44c:	a4 cf       	rjmp	.-184    	; 0x396 <main+0x64>
				}
			}
			else {
				S_SEG_DISPLAY(Current_Temp);
     44e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Current_Temp>
     452:	0e 94 0c 03 	call	0x618	; 0x618 <S_SEG_DISPLAY>
				if(P_B_READ(P_B_1) || P_B_READ(P_B_0))
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     45c:	81 11       	cpse	r24, r1
     45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     460:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	96 cf       	rjmp	.-212    	; 0x396 <main+0x64>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	81 ee       	ldi	r24, 0xE1	; 225
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
     47c:	0d c0       	rjmp	.+26     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				{
					_delay_ms(100);
					while(P_B_READ(P_B_0)||P_B_READ(P_B_1)){
						S_SEG_DISPLAY(Set_Temp);
     47e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Set_Temp>
     482:	0e 94 0c 03 	call	0x618	; 0x618 <S_SEG_DISPLAY>
						Led_Fun();
     486:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Led_Fun>
						Set_Temp_State = ON;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Set_Temp_State>
						TIMER_1_START();
     490:	0e 94 89 08 	call	0x1112	; 0x1112 <TIMER_1_START>
						TIMER_0_START();
     494:	0e 94 46 08 	call	0x108c	; 0x108c <TIMER_0_START>
			else {
				S_SEG_DISPLAY(Current_Temp);
				if(P_B_READ(P_B_1) || P_B_READ(P_B_0))
				{
					_delay_ms(100);
					while(P_B_READ(P_B_0)||P_B_READ(P_B_1)){
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     49e:	81 11       	cpse	r24, r1
     4a0:	ee cf       	rjmp	.-36     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 ca 02 	call	0x594	; 0x594 <P_B_READ>
     4a8:	81 11       	cpse	r24, r1
     4aa:	e9 cf       	rjmp	.-46     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     4ac:	74 cf       	rjmp	.-280    	; 0x396 <main+0x64>

000004ae <LED_INIT>:
}
void LEDS_ON    (void)
{
		PIN_WRITE(R_LED_PIN,HIGH);
		PIN_WRITE(M_LED_PIN,HIGH);
		PIN_WRITE(L_LED_PIN,HIGH);
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	49 f0       	breq	.+18     	; 0x4c4 <LED_INIT+0x16>
     4b2:	18 f0       	brcs	.+6      	; 0x4ba <LED_INIT+0xc>
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	59 f0       	breq	.+22     	; 0x4ce <LED_INIT+0x20>
     4b8:	08 95       	ret
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
     4c2:	08 95       	ret
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	85 e2       	ldi	r24, 0x25	; 37
     4c8:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
     4cc:	08 95       	ret
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	87 e1       	ldi	r24, 0x17	; 23
     4d2:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
     4d6:	08 95       	ret

000004d8 <LED_ON>:
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	49 f0       	breq	.+18     	; 0x4ee <LED_ON+0x16>
     4dc:	18 f0       	brcs	.+6      	; 0x4e4 <LED_ON+0xc>
     4de:	82 30       	cpi	r24, 0x02	; 2
     4e0:	59 f0       	breq	.+22     	; 0x4f8 <LED_ON+0x20>
     4e2:	08 95       	ret
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	80 e2       	ldi	r24, 0x20	; 32
     4e8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     4ec:	08 95       	ret
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	85 e2       	ldi	r24, 0x25	; 37
     4f2:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     4f6:	08 95       	ret
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	87 e1       	ldi	r24, 0x17	; 23
     4fc:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     500:	08 95       	ret

00000502 <LED_OFF>:
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	49 f0       	breq	.+18     	; 0x518 <LED_OFF+0x16>
     506:	18 f0       	brcs	.+6      	; 0x50e <LED_OFF+0xc>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	59 f0       	breq	.+22     	; 0x522 <LED_OFF+0x20>
     50c:	08 95       	ret
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     516:	08 95       	ret
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	85 e2       	ldi	r24, 0x25	; 37
     51c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     520:	08 95       	ret
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	87 e1       	ldi	r24, 0x17	; 23
     526:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     52a:	08 95       	ret

0000052c <LED_TOGGLE>:
     52c:	81 30       	cpi	r24, 0x01	; 1
     52e:	41 f0       	breq	.+16     	; 0x540 <LED_TOGGLE+0x14>
     530:	18 f0       	brcs	.+6      	; 0x538 <LED_TOGGLE+0xc>
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	49 f0       	breq	.+18     	; 0x548 <LED_TOGGLE+0x1c>
     536:	08 95       	ret
     538:	80 e2       	ldi	r24, 0x20	; 32
     53a:	0e 94 f5 06 	call	0xdea	; 0xdea <PIN_TOGGLE>
     53e:	08 95       	ret
     540:	85 e2       	ldi	r24, 0x25	; 37
     542:	0e 94 f5 06 	call	0xdea	; 0xdea <PIN_TOGGLE>
     546:	08 95       	ret
     548:	87 e1       	ldi	r24, 0x17	; 23
     54a:	0e 94 f5 06 	call	0xdea	; 0xdea <PIN_TOGGLE>
     54e:	08 95       	ret

00000550 <LEDS_OFF>:
}
void LEDS_OFF   (void)
{
		PIN_WRITE(R_LED_PIN,LOW);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	80 e2       	ldi	r24, 0x20	; 32
     554:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		PIN_WRITE(M_LED_PIN,LOW);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	85 e2       	ldi	r24, 0x25	; 37
     55c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		PIN_WRITE(L_LED_PIN,LOW);
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	87 e1       	ldi	r24, 0x17	; 23
     564:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     568:	08 95       	ret

0000056a <P_B_INIT>:
#include "DIO.h"


void  P_B_INIT (u8 button)
{
	switch(button)
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	49 f0       	breq	.+18     	; 0x580 <P_B_INIT+0x16>
     56e:	18 f0       	brcs	.+6      	; 0x576 <P_B_INIT+0xc>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	59 f0       	breq	.+22     	; 0x58a <P_B_INIT+0x20>
     574:	08 95       	ret
	{
		case 0:
		PIN_MODE(BUTTON_0_PIN,INPUT);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	8a e0       	ldi	r24, 0x0A	; 10
     57a:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
		break;
     57e:	08 95       	ret
		case 1:
		PIN_MODE(BUTTON_1_PIN,INPUT);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	8a e1       	ldi	r24, 0x1A	; 26
     584:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
		break;
     588:	08 95       	ret
		case 2:
		PIN_MODE(BUTTON_2_PIN,INPUT);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	86 e1       	ldi	r24, 0x16	; 22
     58e:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
     592:	08 95       	ret

00000594 <P_B_READ>:
	}
}
u8 P_B_READ (u8 button)
{
	u8 value = 0;
	switch(button)
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	41 f0       	breq	.+16     	; 0x5a8 <P_B_READ+0x14>
     598:	18 f0       	brcs	.+6      	; 0x5a0 <P_B_READ+0xc>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f0       	breq	.+18     	; 0x5b0 <P_B_READ+0x1c>
     59e:	0c c0       	rjmp	.+24     	; 0x5b8 <P_B_READ+0x24>
	{
		case 0:
		value = PIN_READ(BUTTON_0_PIN);
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	0e 94 6b 07 	call	0xed6	; 0xed6 <PIN_READ>
		break;
     5a6:	08 95       	ret
		case 1:
		value = PIN_READ(BUTTON_1_PIN);
     5a8:	8a e1       	ldi	r24, 0x1A	; 26
     5aa:	0e 94 6b 07 	call	0xed6	; 0xed6 <PIN_READ>
		break;
     5ae:	08 95       	ret
		case 2:
		value = PIN_READ(BUTTON_2_PIN);
     5b0:	86 e1       	ldi	r24, 0x16	; 22
     5b2:	0e 94 6b 07 	call	0xed6	; 0xed6 <PIN_READ>
		break;
     5b6:	08 95       	ret
		break;
	}
}
u8 P_B_READ (u8 button)
{
	u8 value = 0;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		value = PIN_READ(BUTTON_2_PIN);
		break;
	}
	return value;	
}
     5ba:	08 95       	ret

000005bc <S_SEG_INIT>:
#define  F_CPU 16000000UL
#include "util/delay.h"

void S_SEG_INIT        (void)
{
	PIN_MODE(S_SEG_EN_2_PIN,OUTPUT);
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	8b e0       	ldi	r24, 0x0B	; 11
     5c0:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_EN_1_PIN,OUTPUT);
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	8c e0       	ldi	r24, 0x0C	; 12
     5c8:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_DIP_PIN,OUTPUT);
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	8d e0       	ldi	r24, 0x0D	; 13
     5d0:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_A_PIN,OUTPUT);
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_B_PIN,OUTPUT);
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	8d e2       	ldi	r24, 0x2D	; 45
     5e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_C_PIN,OUTPUT);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	8e e2       	ldi	r24, 0x2E	; 46
     5e8:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
	PIN_MODE(S_SEG_D_PIN,OUTPUT);
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	8f e2       	ldi	r24, 0x2F	; 47
     5f0:	0e 94 17 05 	call	0xa2e	; 0xa2e <PIN_MODE>
     5f4:	08 95       	ret

000005f6 <S_SEG_OFF>:
}

void S_SEG_OFF		   (void){
	PIN_WRITE(S_SEG_A_PIN,HIGH);
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	8c e2       	ldi	r24, 0x2C	; 44
     5fa:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
	PIN_WRITE(S_SEG_B_PIN,HIGH);
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	8d e2       	ldi	r24, 0x2D	; 45
     602:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
	PIN_WRITE(S_SEG_C_PIN,HIGH);
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	8e e2       	ldi	r24, 0x2E	; 46
     60a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
	PIN_WRITE(S_SEG_D_PIN,HIGH);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	8f e2       	ldi	r24, 0x2F	; 47
     612:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     616:	08 95       	ret

00000618 <S_SEG_DISPLAY>:
}


void S_SEG_DISPLAY     (u8 full_number)
{
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
	u16 i;
	for(i=0;i<50;i++)
	{
		u8 l_part = (full_number / 10);
     62c:	9d ec       	ldi	r25, 0xCD	; 205
     62e:	89 9f       	mul	r24, r25
     630:	c1 2c       	mov	r12, r1
     632:	11 24       	eor	r1, r1
     634:	c6 94       	lsr	r12
     636:	c6 94       	lsr	r12
     638:	c6 94       	lsr	r12
		u8 r_part = (full_number % 10);
     63a:	2c 2d       	mov	r18, r12
     63c:	22 0f       	add	r18, r18
     63e:	92 2f       	mov	r25, r18
     640:	99 0f       	add	r25, r25
     642:	99 0f       	add	r25, r25
     644:	92 0f       	add	r25, r18
     646:	88 2e       	mov	r8, r24
     648:	89 1a       	sub	r8, r25
     64a:	c2 e3       	ldi	r28, 0x32	; 50
     64c:	d0 e0       	ldi	r29, 0x00	; 0
		PIN_WRITE(S_SEG_EN_1_PIN,HIGH);
		PIN_WRITE(S_SEG_EN_2_PIN,LOW);
		switch(l_part)
     64e:	d1 2c       	mov	r13, r1
			break;
		}
		_delay_ms(1);
		PIN_WRITE(S_SEG_EN_1_PIN,LOW);
		PIN_WRITE(S_SEG_EN_2_PIN,HIGH);
		switch(r_part)
     650:	91 2c       	mov	r9, r1
	u16 i;
	for(i=0;i<50;i++)
	{
		u8 l_part = (full_number / 10);
		u8 r_part = (full_number % 10);
		PIN_WRITE(S_SEG_EN_1_PIN,HIGH);
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	8c e0       	ldi	r24, 0x0C	; 12
     656:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		PIN_WRITE(S_SEG_EN_2_PIN,LOW);
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	8b e0       	ldi	r24, 0x0B	; 11
     65e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		switch(l_part)
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	c8 16       	cp	r12, r24
     666:	d1 04       	cpc	r13, r1
     668:	08 f0       	brcs	.+2      	; 0x66c <S_SEG_DISPLAY+0x54>
     66a:	ae c0       	rjmp	.+348    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
     66c:	f6 01       	movw	r30, r12
     66e:	e6 5d       	subi	r30, 0xD6	; 214
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__tablejump2__>
		{
			case 0:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	8c e2       	ldi	r24, 0x2C	; 44
     67a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	8d e2       	ldi	r24, 0x2D	; 45
     682:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	8e e2       	ldi	r24, 0x2E	; 46
     68a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	8f e2       	ldi	r24, 0x2F	; 47
     692:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     696:	98 c0       	rjmp	.+304    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 1:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	8c e2       	ldi	r24, 0x2C	; 44
     69c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	8d e2       	ldi	r24, 0x2D	; 45
     6a4:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	8e e2       	ldi	r24, 0x2E	; 46
     6ac:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	8f e2       	ldi	r24, 0x2F	; 47
     6b4:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     6b8:	87 c0       	rjmp	.+270    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 2:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	8c e2       	ldi	r24, 0x2C	; 44
     6be:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	8d e2       	ldi	r24, 0x2D	; 45
     6c6:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8e e2       	ldi	r24, 0x2E	; 46
     6ce:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	8f e2       	ldi	r24, 0x2F	; 47
     6d6:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     6da:	76 c0       	rjmp	.+236    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 3:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	8c e2       	ldi	r24, 0x2C	; 44
     6e0:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	8d e2       	ldi	r24, 0x2D	; 45
     6e8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	8e e2       	ldi	r24, 0x2E	; 46
     6f0:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	8f e2       	ldi	r24, 0x2F	; 47
     6f8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     6fc:	65 c0       	rjmp	.+202    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 4:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	8c e2       	ldi	r24, 0x2C	; 44
     702:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	8d e2       	ldi	r24, 0x2D	; 45
     70a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	8e e2       	ldi	r24, 0x2E	; 46
     712:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	8f e2       	ldi	r24, 0x2F	; 47
     71a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     71e:	54 c0       	rjmp	.+168    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 5:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	8c e2       	ldi	r24, 0x2C	; 44
     724:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	8d e2       	ldi	r24, 0x2D	; 45
     72c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	8e e2       	ldi	r24, 0x2E	; 46
     734:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	8f e2       	ldi	r24, 0x2F	; 47
     73c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     740:	43 c0       	rjmp	.+134    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 6:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	8c e2       	ldi	r24, 0x2C	; 44
     746:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8d e2       	ldi	r24, 0x2D	; 45
     74e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	8e e2       	ldi	r24, 0x2E	; 46
     756:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	8f e2       	ldi	r24, 0x2F	; 47
     75e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     762:	32 c0       	rjmp	.+100    	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 7:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	8c e2       	ldi	r24, 0x2C	; 44
     768:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	8d e2       	ldi	r24, 0x2D	; 45
     770:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	8e e2       	ldi	r24, 0x2E	; 46
     778:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	8f e2       	ldi	r24, 0x2F	; 47
     780:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     784:	21 c0       	rjmp	.+66     	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 8:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	8c e2       	ldi	r24, 0x2C	; 44
     78a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	8d e2       	ldi	r24, 0x2D	; 45
     792:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	8e e2       	ldi	r24, 0x2E	; 46
     79a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,HIGH);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	8f e2       	ldi	r24, 0x2F	; 47
     7a2:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     7a6:	10 c0       	rjmp	.+32     	; 0x7c8 <S_SEG_DISPLAY+0x1b0>
			case 9:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	8c e2       	ldi	r24, 0x2C	; 44
     7ac:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	8d e2       	ldi	r24, 0x2D	; 45
     7b4:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	8e e2       	ldi	r24, 0x2E	; 46
     7bc:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,HIGH);
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	8f e2       	ldi	r24, 0x2F	; 47
     7c4:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     7c8:	8f e9       	ldi	r24, 0x9F	; 159
     7ca:	9f e0       	ldi	r25, 0x0F	; 15
     7cc:	01 97       	sbiw	r24, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <S_SEG_DISPLAY+0x1b4>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <S_SEG_DISPLAY+0x1ba>
     7d2:	00 00       	nop
			break;
		}
		_delay_ms(1);
		PIN_WRITE(S_SEG_EN_1_PIN,LOW);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	8c e0       	ldi	r24, 0x0C	; 12
     7d8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		PIN_WRITE(S_SEG_EN_2_PIN,HIGH);
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	8b e0       	ldi	r24, 0x0B	; 11
     7e0:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
		switch(r_part)
     7e4:	9a e0       	ldi	r25, 0x0A	; 10
     7e6:	89 16       	cp	r8, r25
     7e8:	91 04       	cpc	r9, r1
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <S_SEG_DISPLAY+0x1d6>
     7ec:	ae c0       	rjmp	.+348    	; 0x94a <__stack+0xeb>
     7ee:	f4 01       	movw	r30, r8
     7f0:	ec 5c       	subi	r30, 0xCC	; 204
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__tablejump2__>
		{
			case 0:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	8c e2       	ldi	r24, 0x2C	; 44
     7fc:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	8d e2       	ldi	r24, 0x2D	; 45
     804:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	8e e2       	ldi	r24, 0x2E	; 46
     80c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	8f e2       	ldi	r24, 0x2F	; 47
     814:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     818:	98 c0       	rjmp	.+304    	; 0x94a <__stack+0xeb>
			case 1:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	8c e2       	ldi	r24, 0x2C	; 44
     81e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	8d e2       	ldi	r24, 0x2D	; 45
     826:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	8e e2       	ldi	r24, 0x2E	; 46
     82e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	8f e2       	ldi	r24, 0x2F	; 47
     836:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     83a:	87 c0       	rjmp	.+270    	; 0x94a <__stack+0xeb>
			case 2:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	8c e2       	ldi	r24, 0x2C	; 44
     840:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	8d e2       	ldi	r24, 0x2D	; 45
     848:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	8e e2       	ldi	r24, 0x2E	; 46
     850:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	8f e2       	ldi	r24, 0x2F	; 47
     858:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     85c:	76 c0       	rjmp	.+236    	; 0x94a <__stack+0xeb>
			case 3:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	8c e2       	ldi	r24, 0x2C	; 44
     862:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	8d e2       	ldi	r24, 0x2D	; 45
     86a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	8e e2       	ldi	r24, 0x2E	; 46
     872:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	8f e2       	ldi	r24, 0x2F	; 47
     87a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     87e:	65 c0       	rjmp	.+202    	; 0x94a <__stack+0xeb>
			case 4:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	8c e2       	ldi	r24, 0x2C	; 44
     884:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	8d e2       	ldi	r24, 0x2D	; 45
     88c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	8e e2       	ldi	r24, 0x2E	; 46
     894:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	8f e2       	ldi	r24, 0x2F	; 47
     89c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     8a0:	54 c0       	rjmp	.+168    	; 0x94a <__stack+0xeb>
			case 5:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	8c e2       	ldi	r24, 0x2C	; 44
     8a6:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8d e2       	ldi	r24, 0x2D	; 45
     8ae:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	8e e2       	ldi	r24, 0x2E	; 46
     8b6:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8f e2       	ldi	r24, 0x2F	; 47
     8be:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     8c2:	43 c0       	rjmp	.+134    	; 0x94a <__stack+0xeb>
			case 6:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	8c e2       	ldi	r24, 0x2C	; 44
     8c8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8d e2       	ldi	r24, 0x2D	; 45
     8d0:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	8e e2       	ldi	r24, 0x2E	; 46
     8d8:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	8f e2       	ldi	r24, 0x2F	; 47
     8e0:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     8e4:	32 c0       	rjmp	.+100    	; 0x94a <__stack+0xeb>
			case 7:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	8c e2       	ldi	r24, 0x2C	; 44
     8ea:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,HIGH);
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8d e2       	ldi	r24, 0x2D	; 45
     8f2:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,HIGH);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	8e e2       	ldi	r24, 0x2E	; 46
     8fa:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,LOW);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	8f e2       	ldi	r24, 0x2F	; 47
     902:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     906:	21 c0       	rjmp	.+66     	; 0x94a <__stack+0xeb>
			case 8:
			PIN_WRITE(S_SEG_A_PIN,LOW);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	8c e2       	ldi	r24, 0x2C	; 44
     90c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	8d e2       	ldi	r24, 0x2D	; 45
     914:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	8e e2       	ldi	r24, 0x2E	; 46
     91c:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,HIGH);
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	8f e2       	ldi	r24, 0x2F	; 47
     924:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			break;
     928:	10 c0       	rjmp	.+32     	; 0x94a <__stack+0xeb>
			case 9:
			PIN_WRITE(S_SEG_A_PIN,HIGH);
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	8c e2       	ldi	r24, 0x2C	; 44
     92e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_B_PIN,LOW);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	8d e2       	ldi	r24, 0x2D	; 45
     936:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_C_PIN,LOW);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	8e e2       	ldi	r24, 0x2E	; 46
     93e:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
			PIN_WRITE(S_SEG_D_PIN,HIGH);
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	8f e2       	ldi	r24, 0x2F	; 47
     946:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     94a:	8f e9       	ldi	r24, 0x9F	; 159
     94c:	9f e0       	ldi	r25, 0x0F	; 15
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	f1 f7       	brne	.-4      	; 0x94e <__stack+0xef>
     952:	00 c0       	rjmp	.+0      	; 0x954 <__stack+0xf5>
     954:	00 00       	nop
			break;
		}
		_delay_ms(1);
		PIN_WRITE(S_SEG_EN_2_PIN,LOW);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8b e0       	ldi	r24, 0x0B	; 11
     95a:	0e 94 06 06 	call	0xc0c	; 0xc0c <PIN_WRITE>
     95e:	21 97       	sbiw	r28, 0x01	; 1


void S_SEG_DISPLAY     (u8 full_number)
{
	u16 i;
	for(i=0;i<50;i++)
     960:	09 f0       	breq	.+2      	; 0x964 <__stack+0x105>
     962:	77 ce       	rjmp	.-786    	; 0x652 <S_SEG_DISPLAY+0x3a>
			break;
		}
		_delay_ms(1);
		PIN_WRITE(S_SEG_EN_2_PIN,LOW);
	}
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	08 95       	ret

0000097a <TEMP_S_INIT>:
#include "ADC.h"
#include "TEMP_S_CFG.h"

void TEMP_S_INIT(void)
{
	ADC_INIT();
     97a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <ADC_INIT>
     97e:	08 95       	ret

00000980 <TEMP_S_READ>:
}
u16  TEMP_S_READ(void)
{
	u16 value;	
	value = ADC_READ(TEMP_S_PIN);
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <ADC_READ>
	u16 temp;
	temp = ((u32)value * 500 ) / 1023;
	return temp;
     986:	9c 01       	movw	r18, r24
     988:	a4 ef       	ldi	r26, 0xF4	; 244
     98a:	b1 e0       	ldi	r27, 0x01	; 1
     98c:	0e 94 44 09 	call	0x1288	; 0x1288 <__umulhisi3>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	33 e0       	ldi	r19, 0x03	; 3
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	0e 94 1c 09 	call	0x1238	; 0x1238 <__udivmodsi4>
}
     99c:	c9 01       	movw	r24, r18
     99e:	08 95       	ret

000009a0 <ADC_INIT>:
#include "REG.h"

void ADC_INIT(void)
{
	#if ADC_VREF == AVCC
	SET_BIT(ADMUX,6);		 
     9a0:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);		
     9a2:	3f 98       	cbi	0x07, 7	; 7
	#elif ADC_VREF == _2V
	SET_BIT(ADMUX,6);
	SET_BIT(ADMUX,7);
	#endif
	#if ADC_ADJUSTMENT   == RIGHT
	CLR_BIT(ADMUX,5);
     9a4:	3d 98       	cbi	0x07, 5	; 7
	#elif ADC_ADJUSTMENT == LEFT
	SET_BIT(ADMUX,5);
	#endif
	#if AUTO_TRIGERING_MODE    ==   ENABLE
	SET_BIT(ADCSRA,5);     
     9a6:	35 9a       	sbi	0x06, 5	; 6
	#if ADC_PRESCALER   == _64
	CLR_BIT(ADCSRA,0);       
	SET_BIT(ADCSRA,1);       
	SET_BIT(ADCSRA,2);  
	#elif ADC_PRESCALER == _128     
	SET_BIT(ADCSRA,0);
     9a8:	30 9a       	sbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     9aa:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     9ac:	32 9a       	sbi	0x06, 2	; 6
	#endif
	
	SET_BIT(ADCSRA,7);       /*_TO_ENABLE_ADC_*/
     9ae:	37 9a       	sbi	0x06, 7	; 6
     9b0:	08 95       	ret

000009b2 <ADC_READ>:
}

u16 ADC_READ(u8 channel)
{
	switch(channel)
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	88 30       	cpi	r24, 0x08	; 8
     9b6:	91 05       	cpc	r25, r1
     9b8:	a0 f5       	brcc	.+104    	; 0xa22 <ADC_READ+0x70>
     9ba:	fc 01       	movw	r30, r24
     9bc:	e2 5c       	subi	r30, 0xC2	; 194
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__tablejump2__>
	{
		case 0:
		CLR_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_0_*/
     9c4:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_0_*/
     9c6:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_0_*/
     9c8:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_0_*/
     9ca:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_0_*/
     9cc:	3c 98       	cbi	0x07, 4	; 7
		break;
     9ce:	29 c0       	rjmp	.+82     	; 0xa22 <ADC_READ+0x70>
		case 1:
		SET_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_1_*/
     9d0:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_1_*/
     9d2:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_1_*/
     9d4:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_1_*/
     9d6:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_1_*/
     9d8:	3c 98       	cbi	0x07, 4	; 7
		break;
     9da:	23 c0       	rjmp	.+70     	; 0xa22 <ADC_READ+0x70>
		case 2:
		CLR_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_2_*/
     9dc:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_2_*/
     9de:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_2_*/
     9e0:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_2_*/
     9e2:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_2_*/
     9e4:	3c 98       	cbi	0x07, 4	; 7
		break;
     9e6:	1d c0       	rjmp	.+58     	; 0xa22 <ADC_READ+0x70>
		case 3:
		SET_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_3_*/
     9e8:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_3_*/
     9ea:	39 9a       	sbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_3_*/
     9ec:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_3_*/
     9ee:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_3_*/
     9f0:	3c 98       	cbi	0x07, 4	; 7
		break;
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <ADC_READ+0x70>
		case 4:
		CLR_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_4_*/
     9f4:	38 98       	cbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_4_*/
     9f6:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_4_*/
     9f8:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_4_*/
     9fa:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_4_*/
     9fc:	3c 98       	cbi	0x07, 4	; 7
		break;
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <ADC_READ+0x70>
		case 5:
		SET_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_5_*/
     a00:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_5_*/
     a02:	39 98       	cbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_5_*/
     a04:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_5_*/
     a06:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_5_*/
     a08:	3c 98       	cbi	0x07, 4	; 7
		break;
     a0a:	0b c0       	rjmp	.+22     	; 0xa22 <ADC_READ+0x70>
		case 6:
		CLR_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_6_*/
     a0c:	38 98       	cbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_6_*/
     a0e:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_6_*/
     a10:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_6_*/
     a12:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_6_*/
     a14:	3c 98       	cbi	0x07, 4	; 7
		break;
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <ADC_READ+0x70>
		case 7:
		SET_BIT(ADMUX,0);        /*_TO_SELECT_ADC_CHANNEL_7_*/
     a18:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,1);        /*_TO_SELECT_ADC_CHANNEL_7_*/
     a1a:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX,2);        /*_TO_SELECT_ADC_CHANNEL_7_*/
     a1c:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);        /*_TO_SELECT_ADC_CHANNEL_7_*/
     a1e:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);        /*_TO_SELECT_ADC_CHANNEL_7_*/
     a20:	3c 98       	cbi	0x07, 4	; 7
		break;
	}
	u16 x = 0;
	SET_BIT(ADCSRA,6);                  /*_TO_START_CONVERSION_*/
     a22:	36 9a       	sbi	0x06, 6	; 6
	while(GET_BIT(ADCSRA,4) == 0)
     a24:	34 9b       	sbis	0x06, 4	; 6
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <ADC_READ+0x72>
	{
				
	}
	x = ADC_VALUE;
     a28:	84 b1       	in	r24, 0x04	; 4
     a2a:	95 b1       	in	r25, 0x05	; 5
	return x;
}
     a2c:	08 95       	ret

00000a2e <PIN_MODE>:
#include "STD_TYPES.h"
#include "REG.h"

void PIN_MODE (u8 pin,u8 mode)
{
	u8 port = pin / 10;
     a2e:	9d ec       	ldi	r25, 0xCD	; 205
     a30:	89 9f       	mul	r24, r25
     a32:	91 2d       	mov	r25, r1
     a34:	11 24       	eor	r1, r1
     a36:	96 95       	lsr	r25
     a38:	96 95       	lsr	r25
     a3a:	96 95       	lsr	r25
	switch(mode)
     a3c:	66 23       	and	r22, r22
     a3e:	09 f4       	brne	.+2      	; 0xa42 <PIN_MODE+0x14>
     a40:	72 c0       	rjmp	.+228    	; 0xb26 <PIN_MODE+0xf8>
     a42:	61 30       	cpi	r22, 0x01	; 1
     a44:	09 f0       	breq	.+2      	; 0xa48 <PIN_MODE+0x1a>
     a46:	e1 c0       	rjmp	.+450    	; 0xc0a <PIN_MODE+0x1dc>
	{
		case OUTPUT:
	    switch(port)
     a48:	92 30       	cpi	r25, 0x02	; 2
     a4a:	21 f1       	breq	.+72     	; 0xa94 <PIN_MODE+0x66>
     a4c:	18 f4       	brcc	.+6      	; 0xa54 <PIN_MODE+0x26>
     a4e:	91 30       	cpi	r25, 0x01	; 1
     a50:	39 f0       	breq	.+14     	; 0xa60 <PIN_MODE+0x32>
     a52:	08 95       	ret
     a54:	93 30       	cpi	r25, 0x03	; 3
     a56:	c1 f1       	breq	.+112    	; 0xac8 <PIN_MODE+0x9a>
     a58:	94 30       	cpi	r25, 0x04	; 4
     a5a:	09 f4       	brne	.+2      	; 0xa5e <PIN_MODE+0x30>
     a5c:	4c c0       	rjmp	.+152    	; 0xaf6 <PIN_MODE+0xc8>
     a5e:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			SET_BIT(DIRECTION_REGISTER_B,pin);
     a60:	47 b3       	in	r20, 0x17	; 23
     a62:	9d ec       	ldi	r25, 0xCD	; 205
     a64:	89 9f       	mul	r24, r25
     a66:	91 2d       	mov	r25, r1
     a68:	11 24       	eor	r1, r1
     a6a:	96 95       	lsr	r25
     a6c:	96 95       	lsr	r25
     a6e:	96 95       	lsr	r25
     a70:	99 0f       	add	r25, r25
     a72:	29 2f       	mov	r18, r25
     a74:	22 0f       	add	r18, r18
     a76:	22 0f       	add	r18, r18
     a78:	92 0f       	add	r25, r18
     a7a:	89 1b       	sub	r24, r25
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	b9 01       	movw	r22, r18
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <PIN_MODE+0x5a>
     a84:	66 0f       	add	r22, r22
     a86:	77 1f       	adc	r23, r23
     a88:	8a 95       	dec	r24
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <PIN_MODE+0x56>
     a8c:	cb 01       	movw	r24, r22
     a8e:	84 2b       	or	r24, r20
     a90:	87 bb       	out	0x17, r24	; 23
			break;
     a92:	08 95       	ret
			case 2:
			pin = pin % 20;
			SET_BIT(DIRECTION_REGISTER_D,pin);
     a94:	41 b3       	in	r20, 0x11	; 17
     a96:	9d ec       	ldi	r25, 0xCD	; 205
     a98:	89 9f       	mul	r24, r25
     a9a:	91 2d       	mov	r25, r1
     a9c:	11 24       	eor	r1, r1
     a9e:	92 95       	swap	r25
     aa0:	9f 70       	andi	r25, 0x0F	; 15
     aa2:	99 0f       	add	r25, r25
     aa4:	99 0f       	add	r25, r25
     aa6:	29 2f       	mov	r18, r25
     aa8:	22 0f       	add	r18, r18
     aaa:	22 0f       	add	r18, r18
     aac:	92 0f       	add	r25, r18
     aae:	89 1b       	sub	r24, r25
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	b9 01       	movw	r22, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <PIN_MODE+0x8e>
     ab8:	66 0f       	add	r22, r22
     aba:	77 1f       	adc	r23, r23
     abc:	8a 95       	dec	r24
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <PIN_MODE+0x8a>
     ac0:	cb 01       	movw	r24, r22
     ac2:	84 2b       	or	r24, r20
     ac4:	81 bb       	out	0x11, r24	; 17
			break;
     ac6:	08 95       	ret
			case 3:
			pin = pin % 30;
			SET_BIT(DIRECTION_REGISTER_C,pin);
     ac8:	44 b3       	in	r20, 0x14	; 20
     aca:	99 e8       	ldi	r25, 0x89	; 137
     acc:	89 9f       	mul	r24, r25
     ace:	91 2d       	mov	r25, r1
     ad0:	11 24       	eor	r1, r1
     ad2:	92 95       	swap	r25
     ad4:	9f 70       	andi	r25, 0x0F	; 15
     ad6:	7e e1       	ldi	r23, 0x1E	; 30
     ad8:	97 9f       	mul	r25, r23
     ada:	80 19       	sub	r24, r0
     adc:	11 24       	eor	r1, r1
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	b9 01       	movw	r22, r18
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <PIN_MODE+0xbc>
     ae6:	66 0f       	add	r22, r22
     ae8:	77 1f       	adc	r23, r23
     aea:	8a 95       	dec	r24
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <PIN_MODE+0xb8>
     aee:	cb 01       	movw	r24, r22
     af0:	84 2b       	or	r24, r20
     af2:	84 bb       	out	0x14, r24	; 20
			break;
     af4:	08 95       	ret
			case 4:
			pin = pin % 40;
			SET_BIT(DIRECTION_REGISTER_A,pin);
     af6:	4a b3       	in	r20, 0x1a	; 26
     af8:	9d ec       	ldi	r25, 0xCD	; 205
     afa:	89 9f       	mul	r24, r25
     afc:	91 2d       	mov	r25, r1
     afe:	11 24       	eor	r1, r1
     b00:	92 95       	swap	r25
     b02:	96 95       	lsr	r25
     b04:	97 70       	andi	r25, 0x07	; 7
     b06:	78 e2       	ldi	r23, 0x28	; 40
     b08:	97 9f       	mul	r25, r23
     b0a:	80 19       	sub	r24, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	b9 01       	movw	r22, r18
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <PIN_MODE+0xec>
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <PIN_MODE+0xe8>
     b1e:	cb 01       	movw	r24, r22
     b20:	84 2b       	or	r24, r20
     b22:	8a bb       	out	0x1a, r24	; 26
			break;	
     b24:	08 95       	ret
		}
		break;
		
		case INPUT:
		switch(port)
     b26:	92 30       	cpi	r25, 0x02	; 2
     b28:	29 f1       	breq	.+74     	; 0xb74 <PIN_MODE+0x146>
     b2a:	18 f4       	brcc	.+6      	; 0xb32 <PIN_MODE+0x104>
     b2c:	91 30       	cpi	r25, 0x01	; 1
     b2e:	39 f0       	breq	.+14     	; 0xb3e <PIN_MODE+0x110>
     b30:	08 95       	ret
     b32:	93 30       	cpi	r25, 0x03	; 3
     b34:	d1 f1       	breq	.+116    	; 0xbaa <PIN_MODE+0x17c>
     b36:	94 30       	cpi	r25, 0x04	; 4
     b38:	09 f4       	brne	.+2      	; 0xb3c <PIN_MODE+0x10e>
     b3a:	4f c0       	rjmp	.+158    	; 0xbda <PIN_MODE+0x1ac>
     b3c:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			CLR_BIT(DIRECTION_REGISTER_B,pin);
     b3e:	47 b3       	in	r20, 0x17	; 23
     b40:	9d ec       	ldi	r25, 0xCD	; 205
     b42:	89 9f       	mul	r24, r25
     b44:	91 2d       	mov	r25, r1
     b46:	11 24       	eor	r1, r1
     b48:	96 95       	lsr	r25
     b4a:	96 95       	lsr	r25
     b4c:	96 95       	lsr	r25
     b4e:	99 0f       	add	r25, r25
     b50:	29 2f       	mov	r18, r25
     b52:	22 0f       	add	r18, r18
     b54:	22 0f       	add	r18, r18
     b56:	92 0f       	add	r25, r18
     b58:	89 1b       	sub	r24, r25
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	b9 01       	movw	r22, r18
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <PIN_MODE+0x138>
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	8a 95       	dec	r24
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <PIN_MODE+0x134>
     b6a:	cb 01       	movw	r24, r22
     b6c:	80 95       	com	r24
     b6e:	84 23       	and	r24, r20
     b70:	87 bb       	out	0x17, r24	; 23
			break;
     b72:	08 95       	ret
			case 2:
			pin = pin % 20;
			CLR_BIT(DIRECTION_REGISTER_D,pin);
     b74:	41 b3       	in	r20, 0x11	; 17
     b76:	9d ec       	ldi	r25, 0xCD	; 205
     b78:	89 9f       	mul	r24, r25
     b7a:	91 2d       	mov	r25, r1
     b7c:	11 24       	eor	r1, r1
     b7e:	92 95       	swap	r25
     b80:	9f 70       	andi	r25, 0x0F	; 15
     b82:	99 0f       	add	r25, r25
     b84:	99 0f       	add	r25, r25
     b86:	29 2f       	mov	r18, r25
     b88:	22 0f       	add	r18, r18
     b8a:	22 0f       	add	r18, r18
     b8c:	92 0f       	add	r25, r18
     b8e:	89 1b       	sub	r24, r25
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	b9 01       	movw	r22, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <PIN_MODE+0x16e>
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <PIN_MODE+0x16a>
     ba0:	cb 01       	movw	r24, r22
     ba2:	80 95       	com	r24
     ba4:	84 23       	and	r24, r20
     ba6:	81 bb       	out	0x11, r24	; 17
			break;
     ba8:	08 95       	ret
			case 3:
			pin = pin % 30;
			CLR_BIT(DIRECTION_REGISTER_C,pin);
     baa:	44 b3       	in	r20, 0x14	; 20
     bac:	99 e8       	ldi	r25, 0x89	; 137
     bae:	89 9f       	mul	r24, r25
     bb0:	91 2d       	mov	r25, r1
     bb2:	11 24       	eor	r1, r1
     bb4:	92 95       	swap	r25
     bb6:	9f 70       	andi	r25, 0x0F	; 15
     bb8:	7e e1       	ldi	r23, 0x1E	; 30
     bba:	97 9f       	mul	r25, r23
     bbc:	80 19       	sub	r24, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	b9 01       	movw	r22, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <PIN_MODE+0x19e>
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	8a 95       	dec	r24
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <PIN_MODE+0x19a>
     bd0:	cb 01       	movw	r24, r22
     bd2:	80 95       	com	r24
     bd4:	84 23       	and	r24, r20
     bd6:	84 bb       	out	0x14, r24	; 20
			break;
     bd8:	08 95       	ret
			case 4:
			pin = pin % 40;
			CLR_BIT(DIRECTION_REGISTER_A,pin);
     bda:	4a b3       	in	r20, 0x1a	; 26
     bdc:	9d ec       	ldi	r25, 0xCD	; 205
     bde:	89 9f       	mul	r24, r25
     be0:	91 2d       	mov	r25, r1
     be2:	11 24       	eor	r1, r1
     be4:	92 95       	swap	r25
     be6:	96 95       	lsr	r25
     be8:	97 70       	andi	r25, 0x07	; 7
     bea:	78 e2       	ldi	r23, 0x28	; 40
     bec:	97 9f       	mul	r25, r23
     bee:	80 19       	sub	r24, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	b9 01       	movw	r22, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <PIN_MODE+0x1d0>
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	8a 95       	dec	r24
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <PIN_MODE+0x1cc>
     c02:	cb 01       	movw	r24, r22
     c04:	80 95       	com	r24
     c06:	84 23       	and	r24, r20
     c08:	8a bb       	out	0x1a, r24	; 26
     c0a:	08 95       	ret

00000c0c <PIN_WRITE>:
		break;
	}
}
void PIN_WRITE (u8 pin,u8 status)
{
	u8 port = pin / 10;
     c0c:	9d ec       	ldi	r25, 0xCD	; 205
     c0e:	89 9f       	mul	r24, r25
     c10:	91 2d       	mov	r25, r1
     c12:	11 24       	eor	r1, r1
     c14:	96 95       	lsr	r25
     c16:	96 95       	lsr	r25
     c18:	96 95       	lsr	r25
	switch(status)
     c1a:	66 23       	and	r22, r22
     c1c:	09 f4       	brne	.+2      	; 0xc20 <PIN_WRITE+0x14>
     c1e:	72 c0       	rjmp	.+228    	; 0xd04 <PIN_WRITE+0xf8>
     c20:	61 30       	cpi	r22, 0x01	; 1
     c22:	09 f0       	breq	.+2      	; 0xc26 <PIN_WRITE+0x1a>
     c24:	e1 c0       	rjmp	.+450    	; 0xde8 <PIN_WRITE+0x1dc>
	{
		case HIGH:
		switch(port)
     c26:	92 30       	cpi	r25, 0x02	; 2
     c28:	21 f1       	breq	.+72     	; 0xc72 <PIN_WRITE+0x66>
     c2a:	18 f4       	brcc	.+6      	; 0xc32 <PIN_WRITE+0x26>
     c2c:	91 30       	cpi	r25, 0x01	; 1
     c2e:	39 f0       	breq	.+14     	; 0xc3e <PIN_WRITE+0x32>
     c30:	08 95       	ret
     c32:	93 30       	cpi	r25, 0x03	; 3
     c34:	c1 f1       	breq	.+112    	; 0xca6 <PIN_WRITE+0x9a>
     c36:	94 30       	cpi	r25, 0x04	; 4
     c38:	09 f4       	brne	.+2      	; 0xc3c <PIN_WRITE+0x30>
     c3a:	4c c0       	rjmp	.+152    	; 0xcd4 <PIN_WRITE+0xc8>
     c3c:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			SET_BIT(WRITE_DATA_REGISTER_B,pin);
     c3e:	48 b3       	in	r20, 0x18	; 24
     c40:	9d ec       	ldi	r25, 0xCD	; 205
     c42:	89 9f       	mul	r24, r25
     c44:	91 2d       	mov	r25, r1
     c46:	11 24       	eor	r1, r1
     c48:	96 95       	lsr	r25
     c4a:	96 95       	lsr	r25
     c4c:	96 95       	lsr	r25
     c4e:	99 0f       	add	r25, r25
     c50:	29 2f       	mov	r18, r25
     c52:	22 0f       	add	r18, r18
     c54:	22 0f       	add	r18, r18
     c56:	92 0f       	add	r25, r18
     c58:	89 1b       	sub	r24, r25
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	b9 01       	movw	r22, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <PIN_WRITE+0x5a>
     c62:	66 0f       	add	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	8a 95       	dec	r24
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <PIN_WRITE+0x56>
     c6a:	cb 01       	movw	r24, r22
     c6c:	84 2b       	or	r24, r20
     c6e:	88 bb       	out	0x18, r24	; 24
			break;
     c70:	08 95       	ret
			case 2:
			pin = pin % 20;
			SET_BIT(WRITE_DATA_REGISTER_D,pin);
     c72:	42 b3       	in	r20, 0x12	; 18
     c74:	9d ec       	ldi	r25, 0xCD	; 205
     c76:	89 9f       	mul	r24, r25
     c78:	91 2d       	mov	r25, r1
     c7a:	11 24       	eor	r1, r1
     c7c:	92 95       	swap	r25
     c7e:	9f 70       	andi	r25, 0x0F	; 15
     c80:	99 0f       	add	r25, r25
     c82:	99 0f       	add	r25, r25
     c84:	29 2f       	mov	r18, r25
     c86:	22 0f       	add	r18, r18
     c88:	22 0f       	add	r18, r18
     c8a:	92 0f       	add	r25, r18
     c8c:	89 1b       	sub	r24, r25
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	b9 01       	movw	r22, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <PIN_WRITE+0x8e>
     c96:	66 0f       	add	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	8a 95       	dec	r24
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <PIN_WRITE+0x8a>
     c9e:	cb 01       	movw	r24, r22
     ca0:	84 2b       	or	r24, r20
     ca2:	82 bb       	out	0x12, r24	; 18
			break;
     ca4:	08 95       	ret
			case 3:
			pin = pin % 30;
			SET_BIT(WRITE_DATA_REGISTER_C,pin);
     ca6:	45 b3       	in	r20, 0x15	; 21
     ca8:	99 e8       	ldi	r25, 0x89	; 137
     caa:	89 9f       	mul	r24, r25
     cac:	91 2d       	mov	r25, r1
     cae:	11 24       	eor	r1, r1
     cb0:	92 95       	swap	r25
     cb2:	9f 70       	andi	r25, 0x0F	; 15
     cb4:	7e e1       	ldi	r23, 0x1E	; 30
     cb6:	97 9f       	mul	r25, r23
     cb8:	80 19       	sub	r24, r0
     cba:	11 24       	eor	r1, r1
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	b9 01       	movw	r22, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <PIN_WRITE+0xbc>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	8a 95       	dec	r24
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <PIN_WRITE+0xb8>
     ccc:	cb 01       	movw	r24, r22
     cce:	84 2b       	or	r24, r20
     cd0:	85 bb       	out	0x15, r24	; 21
			break;
     cd2:	08 95       	ret
			case 4:
			pin = pin % 40;
			SET_BIT(WRITE_DATA_REGISTER_A,pin);
     cd4:	4b b3       	in	r20, 0x1b	; 27
     cd6:	9d ec       	ldi	r25, 0xCD	; 205
     cd8:	89 9f       	mul	r24, r25
     cda:	91 2d       	mov	r25, r1
     cdc:	11 24       	eor	r1, r1
     cde:	92 95       	swap	r25
     ce0:	96 95       	lsr	r25
     ce2:	97 70       	andi	r25, 0x07	; 7
     ce4:	78 e2       	ldi	r23, 0x28	; 40
     ce6:	97 9f       	mul	r25, r23
     ce8:	80 19       	sub	r24, r0
     cea:	11 24       	eor	r1, r1
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	b9 01       	movw	r22, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <PIN_WRITE+0xec>
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	8a 95       	dec	r24
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <PIN_WRITE+0xe8>
     cfc:	cb 01       	movw	r24, r22
     cfe:	84 2b       	or	r24, r20
     d00:	8b bb       	out	0x1b, r24	; 27
			break;
     d02:	08 95       	ret
		}
		break;
		
		case LOW:
		switch(port)
     d04:	92 30       	cpi	r25, 0x02	; 2
     d06:	29 f1       	breq	.+74     	; 0xd52 <PIN_WRITE+0x146>
     d08:	18 f4       	brcc	.+6      	; 0xd10 <PIN_WRITE+0x104>
     d0a:	91 30       	cpi	r25, 0x01	; 1
     d0c:	39 f0       	breq	.+14     	; 0xd1c <PIN_WRITE+0x110>
     d0e:	08 95       	ret
     d10:	93 30       	cpi	r25, 0x03	; 3
     d12:	d1 f1       	breq	.+116    	; 0xd88 <PIN_WRITE+0x17c>
     d14:	94 30       	cpi	r25, 0x04	; 4
     d16:	09 f4       	brne	.+2      	; 0xd1a <PIN_WRITE+0x10e>
     d18:	4f c0       	rjmp	.+158    	; 0xdb8 <PIN_WRITE+0x1ac>
     d1a:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			CLR_BIT(WRITE_DATA_REGISTER_B,pin);
     d1c:	48 b3       	in	r20, 0x18	; 24
     d1e:	9d ec       	ldi	r25, 0xCD	; 205
     d20:	89 9f       	mul	r24, r25
     d22:	91 2d       	mov	r25, r1
     d24:	11 24       	eor	r1, r1
     d26:	96 95       	lsr	r25
     d28:	96 95       	lsr	r25
     d2a:	96 95       	lsr	r25
     d2c:	99 0f       	add	r25, r25
     d2e:	29 2f       	mov	r18, r25
     d30:	22 0f       	add	r18, r18
     d32:	22 0f       	add	r18, r18
     d34:	92 0f       	add	r25, r18
     d36:	89 1b       	sub	r24, r25
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	b9 01       	movw	r22, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <PIN_WRITE+0x138>
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <PIN_WRITE+0x134>
     d48:	cb 01       	movw	r24, r22
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	88 bb       	out	0x18, r24	; 24
			break;
     d50:	08 95       	ret
			case 2:
			pin = pin % 20;
			CLR_BIT(WRITE_DATA_REGISTER_D,pin);
     d52:	42 b3       	in	r20, 0x12	; 18
     d54:	9d ec       	ldi	r25, 0xCD	; 205
     d56:	89 9f       	mul	r24, r25
     d58:	91 2d       	mov	r25, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	92 95       	swap	r25
     d5e:	9f 70       	andi	r25, 0x0F	; 15
     d60:	99 0f       	add	r25, r25
     d62:	99 0f       	add	r25, r25
     d64:	29 2f       	mov	r18, r25
     d66:	22 0f       	add	r18, r18
     d68:	22 0f       	add	r18, r18
     d6a:	92 0f       	add	r25, r18
     d6c:	89 1b       	sub	r24, r25
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	b9 01       	movw	r22, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <PIN_WRITE+0x16e>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	8a 95       	dec	r24
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <PIN_WRITE+0x16a>
     d7e:	cb 01       	movw	r24, r22
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	82 bb       	out	0x12, r24	; 18
			break;
     d86:	08 95       	ret
			case 3:
			pin = pin % 30;
			CLR_BIT(WRITE_DATA_REGISTER_C,pin);
     d88:	45 b3       	in	r20, 0x15	; 21
     d8a:	99 e8       	ldi	r25, 0x89	; 137
     d8c:	89 9f       	mul	r24, r25
     d8e:	91 2d       	mov	r25, r1
     d90:	11 24       	eor	r1, r1
     d92:	92 95       	swap	r25
     d94:	9f 70       	andi	r25, 0x0F	; 15
     d96:	7e e1       	ldi	r23, 0x1E	; 30
     d98:	97 9f       	mul	r25, r23
     d9a:	80 19       	sub	r24, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <PIN_WRITE+0x19e>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <PIN_WRITE+0x19a>
     dae:	cb 01       	movw	r24, r22
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	85 bb       	out	0x15, r24	; 21
			break;
     db6:	08 95       	ret
			case 4:
			pin = pin % 40;
			CLR_BIT(WRITE_DATA_REGISTER_A,pin);
     db8:	4b b3       	in	r20, 0x1b	; 27
     dba:	9d ec       	ldi	r25, 0xCD	; 205
     dbc:	89 9f       	mul	r24, r25
     dbe:	91 2d       	mov	r25, r1
     dc0:	11 24       	eor	r1, r1
     dc2:	92 95       	swap	r25
     dc4:	96 95       	lsr	r25
     dc6:	97 70       	andi	r25, 0x07	; 7
     dc8:	78 e2       	ldi	r23, 0x28	; 40
     dca:	97 9f       	mul	r25, r23
     dcc:	80 19       	sub	r24, r0
     dce:	11 24       	eor	r1, r1
     dd0:	21 e0       	ldi	r18, 0x01	; 1
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	b9 01       	movw	r22, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <PIN_WRITE+0x1d0>
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	8a 95       	dec	r24
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <PIN_WRITE+0x1cc>
     de0:	cb 01       	movw	r24, r22
     de2:	80 95       	com	r24
     de4:	84 23       	and	r24, r20
     de6:	8b bb       	out	0x1b, r24	; 27
     de8:	08 95       	ret

00000dea <PIN_TOGGLE>:
}

void PIN_TOGGLE(u8 pin)
{
	u8 port = pin / 10;
	switch(port)
     dea:	9d ec       	ldi	r25, 0xCD	; 205
     dec:	89 9f       	mul	r24, r25
     dee:	91 2d       	mov	r25, r1
     df0:	11 24       	eor	r1, r1
     df2:	96 95       	lsr	r25
     df4:	96 95       	lsr	r25
     df6:	96 95       	lsr	r25
     df8:	92 30       	cpi	r25, 0x02	; 2
     dfa:	21 f1       	breq	.+72     	; 0xe44 <PIN_TOGGLE+0x5a>
     dfc:	18 f4       	brcc	.+6      	; 0xe04 <PIN_TOGGLE+0x1a>
     dfe:	91 30       	cpi	r25, 0x01	; 1
     e00:	39 f0       	breq	.+14     	; 0xe10 <PIN_TOGGLE+0x26>
     e02:	08 95       	ret
     e04:	93 30       	cpi	r25, 0x03	; 3
     e06:	c1 f1       	breq	.+112    	; 0xe78 <PIN_TOGGLE+0x8e>
     e08:	94 30       	cpi	r25, 0x04	; 4
     e0a:	09 f4       	brne	.+2      	; 0xe0e <PIN_TOGGLE+0x24>
     e0c:	4c c0       	rjmp	.+152    	; 0xea6 <PIN_TOGGLE+0xbc>
     e0e:	08 95       	ret
	{
		case 1:
		pin = pin % 10;
		TOG_BIT(WRITE_DATA_REGISTER_B,pin);
     e10:	48 b3       	in	r20, 0x18	; 24
     e12:	9d ec       	ldi	r25, 0xCD	; 205
     e14:	89 9f       	mul	r24, r25
     e16:	91 2d       	mov	r25, r1
     e18:	11 24       	eor	r1, r1
     e1a:	96 95       	lsr	r25
     e1c:	96 95       	lsr	r25
     e1e:	96 95       	lsr	r25
     e20:	99 0f       	add	r25, r25
     e22:	29 2f       	mov	r18, r25
     e24:	22 0f       	add	r18, r18
     e26:	22 0f       	add	r18, r18
     e28:	92 0f       	add	r25, r18
     e2a:	89 1b       	sub	r24, r25
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	b9 01       	movw	r22, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <PIN_TOGGLE+0x4e>
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	8a 95       	dec	r24
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <PIN_TOGGLE+0x4a>
     e3c:	cb 01       	movw	r24, r22
     e3e:	84 27       	eor	r24, r20
     e40:	88 bb       	out	0x18, r24	; 24
		break;
     e42:	08 95       	ret
		case 2:
		pin = pin % 20;
		TOG_BIT(WRITE_DATA_REGISTER_D,pin);
     e44:	42 b3       	in	r20, 0x12	; 18
     e46:	9d ec       	ldi	r25, 0xCD	; 205
     e48:	89 9f       	mul	r24, r25
     e4a:	91 2d       	mov	r25, r1
     e4c:	11 24       	eor	r1, r1
     e4e:	92 95       	swap	r25
     e50:	9f 70       	andi	r25, 0x0F	; 15
     e52:	99 0f       	add	r25, r25
     e54:	99 0f       	add	r25, r25
     e56:	29 2f       	mov	r18, r25
     e58:	22 0f       	add	r18, r18
     e5a:	22 0f       	add	r18, r18
     e5c:	92 0f       	add	r25, r18
     e5e:	89 1b       	sub	r24, r25
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	b9 01       	movw	r22, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <PIN_TOGGLE+0x82>
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	8a 95       	dec	r24
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <PIN_TOGGLE+0x7e>
     e70:	cb 01       	movw	r24, r22
     e72:	84 27       	eor	r24, r20
     e74:	82 bb       	out	0x12, r24	; 18
		break;
     e76:	08 95       	ret
		case 3:
		pin = pin % 30;
		TOG_BIT(WRITE_DATA_REGISTER_C,pin);
     e78:	45 b3       	in	r20, 0x15	; 21
     e7a:	99 e8       	ldi	r25, 0x89	; 137
     e7c:	89 9f       	mul	r24, r25
     e7e:	91 2d       	mov	r25, r1
     e80:	11 24       	eor	r1, r1
     e82:	92 95       	swap	r25
     e84:	9f 70       	andi	r25, 0x0F	; 15
     e86:	7e e1       	ldi	r23, 0x1E	; 30
     e88:	97 9f       	mul	r25, r23
     e8a:	80 19       	sub	r24, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	b9 01       	movw	r22, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <PIN_TOGGLE+0xb0>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	8a 95       	dec	r24
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <PIN_TOGGLE+0xac>
     e9e:	cb 01       	movw	r24, r22
     ea0:	84 27       	eor	r24, r20
     ea2:	85 bb       	out	0x15, r24	; 21
		break;
     ea4:	08 95       	ret
		case 4:
		pin = pin % 40;
		TOG_BIT(WRITE_DATA_REGISTER_A,pin);
     ea6:	4b b3       	in	r20, 0x1b	; 27
     ea8:	9d ec       	ldi	r25, 0xCD	; 205
     eaa:	89 9f       	mul	r24, r25
     eac:	91 2d       	mov	r25, r1
     eae:	11 24       	eor	r1, r1
     eb0:	92 95       	swap	r25
     eb2:	96 95       	lsr	r25
     eb4:	97 70       	andi	r25, 0x07	; 7
     eb6:	78 e2       	ldi	r23, 0x28	; 40
     eb8:	97 9f       	mul	r25, r23
     eba:	80 19       	sub	r24, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	b9 01       	movw	r22, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <PIN_TOGGLE+0xe0>
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	8a 95       	dec	r24
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <PIN_TOGGLE+0xdc>
     ece:	cb 01       	movw	r24, r22
     ed0:	84 27       	eor	r24, r20
     ed2:	8b bb       	out	0x1b, r24	; 27
     ed4:	08 95       	ret

00000ed6 <PIN_READ>:

u8 PIN_READ (u8 pin)
{
	u8 port = pin / 10;
	u8 value = 0;
	switch(port)
     ed6:	9d ec       	ldi	r25, 0xCD	; 205
     ed8:	89 9f       	mul	r24, r25
     eda:	91 2d       	mov	r25, r1
     edc:	11 24       	eor	r1, r1
     ede:	96 95       	lsr	r25
     ee0:	96 95       	lsr	r25
     ee2:	96 95       	lsr	r25
     ee4:	92 30       	cpi	r25, 0x02	; 2
     ee6:	11 f1       	breq	.+68     	; 0xf2c <PIN_READ+0x56>
     ee8:	18 f4       	brcc	.+6      	; 0xef0 <PIN_READ+0x1a>
     eea:	91 30       	cpi	r25, 0x01	; 1
     eec:	39 f0       	breq	.+14     	; 0xefc <PIN_READ+0x26>
     eee:	61 c0       	rjmp	.+194    	; 0xfb2 <PIN_READ+0xdc>
     ef0:	93 30       	cpi	r25, 0x03	; 3
     ef2:	a1 f1       	breq	.+104    	; 0xf5c <PIN_READ+0x86>
     ef4:	94 30       	cpi	r25, 0x04	; 4
     ef6:	09 f4       	brne	.+2      	; 0xefa <PIN_READ+0x24>
     ef8:	46 c0       	rjmp	.+140    	; 0xf86 <PIN_READ+0xb0>
     efa:	5b c0       	rjmp	.+182    	; 0xfb2 <PIN_READ+0xdc>
	{
		case 1:
		pin = pin % 10;
		value = GET_BIT(READ_DATA_REGISTER_B,pin);
     efc:	26 b3       	in	r18, 0x16	; 22
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	9d ec       	ldi	r25, 0xCD	; 205
     f02:	89 9f       	mul	r24, r25
     f04:	91 2d       	mov	r25, r1
     f06:	11 24       	eor	r1, r1
     f08:	96 95       	lsr	r25
     f0a:	96 95       	lsr	r25
     f0c:	96 95       	lsr	r25
     f0e:	99 0f       	add	r25, r25
     f10:	49 2f       	mov	r20, r25
     f12:	44 0f       	add	r20, r20
     f14:	44 0f       	add	r20, r20
     f16:	94 0f       	add	r25, r20
     f18:	89 1b       	sub	r24, r25
     f1a:	a9 01       	movw	r20, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <PIN_READ+0x4c>
     f1e:	55 95       	asr	r21
     f20:	47 95       	ror	r20
     f22:	8a 95       	dec	r24
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <PIN_READ+0x48>
     f26:	ca 01       	movw	r24, r20
     f28:	81 70       	andi	r24, 0x01	; 1
		break;
     f2a:	08 95       	ret
		case 2:
		pin = pin % 20;
		value = GET_BIT(READ_DATA_REGISTER_D,pin);
     f2c:	20 b3       	in	r18, 0x10	; 16
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	9d ec       	ldi	r25, 0xCD	; 205
     f32:	89 9f       	mul	r24, r25
     f34:	91 2d       	mov	r25, r1
     f36:	11 24       	eor	r1, r1
     f38:	92 95       	swap	r25
     f3a:	9f 70       	andi	r25, 0x0F	; 15
     f3c:	99 0f       	add	r25, r25
     f3e:	99 0f       	add	r25, r25
     f40:	49 2f       	mov	r20, r25
     f42:	44 0f       	add	r20, r20
     f44:	44 0f       	add	r20, r20
     f46:	94 0f       	add	r25, r20
     f48:	89 1b       	sub	r24, r25
     f4a:	a9 01       	movw	r20, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <PIN_READ+0x7c>
     f4e:	55 95       	asr	r21
     f50:	47 95       	ror	r20
     f52:	8a 95       	dec	r24
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <PIN_READ+0x78>
     f56:	ca 01       	movw	r24, r20
     f58:	81 70       	andi	r24, 0x01	; 1
		break;
     f5a:	08 95       	ret
		case 3:
		pin = pin % 30;
		value = GET_BIT(READ_DATA_REGISTER_C,pin);
     f5c:	23 b3       	in	r18, 0x13	; 19
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	99 e8       	ldi	r25, 0x89	; 137
     f62:	89 9f       	mul	r24, r25
     f64:	91 2d       	mov	r25, r1
     f66:	11 24       	eor	r1, r1
     f68:	92 95       	swap	r25
     f6a:	9f 70       	andi	r25, 0x0F	; 15
     f6c:	5e e1       	ldi	r21, 0x1E	; 30
     f6e:	95 9f       	mul	r25, r21
     f70:	80 19       	sub	r24, r0
     f72:	11 24       	eor	r1, r1
     f74:	a9 01       	movw	r20, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <PIN_READ+0xa6>
     f78:	55 95       	asr	r21
     f7a:	47 95       	ror	r20
     f7c:	8a 95       	dec	r24
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <PIN_READ+0xa2>
     f80:	ca 01       	movw	r24, r20
     f82:	81 70       	andi	r24, 0x01	; 1
		break;
     f84:	08 95       	ret
		case 4:
		pin = pin % 40;
		value = GET_BIT(READ_DATA_REGISTER_A,pin);
     f86:	29 b3       	in	r18, 0x19	; 25
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	9d ec       	ldi	r25, 0xCD	; 205
     f8c:	89 9f       	mul	r24, r25
     f8e:	91 2d       	mov	r25, r1
     f90:	11 24       	eor	r1, r1
     f92:	92 95       	swap	r25
     f94:	96 95       	lsr	r25
     f96:	97 70       	andi	r25, 0x07	; 7
     f98:	58 e2       	ldi	r21, 0x28	; 40
     f9a:	95 9f       	mul	r25, r21
     f9c:	80 19       	sub	r24, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <PIN_READ+0xd2>
     fa4:	55 95       	asr	r21
     fa6:	47 95       	ror	r20
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <PIN_READ+0xce>
     fac:	ca 01       	movw	r24, r20
     fae:	81 70       	andi	r24, 0x01	; 1
		break;
     fb0:	08 95       	ret
}

u8 PIN_READ (u8 pin)
{
	u8 port = pin / 10;
	u8 value = 0;
     fb2:	80 e0       	ldi	r24, 0x00	; 0
		pin = pin % 40;
		value = GET_BIT(READ_DATA_REGISTER_A,pin);
		break;
	}
    return value;
}
     fb4:	08 95       	ret

00000fb6 <EXTERNAL_INT_0_INIT>:
#include "REG.h"
#include "BIT_MATH.h"

void EXTERNAL_INT_0_INIT(void)
{
	SET_BIT(SREG,7);         /*_TO_ENABLE_EXTERNAL_INT_*****************/
     fb6:	8f b7       	in	r24, 0x3f	; 63
     fb8:	80 68       	ori	r24, 0x80	; 128
     fba:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(GICR,6);         /*_TO_ENABLE_TNTERRUPT_0_******************/
     fbc:	8b b7       	in	r24, 0x3b	; 59
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(MCUCR,0);        /*_DETERMINE_ACTION_TRIGGER_THE_INTERRUPT_*/
     fc2:	85 b7       	in	r24, 0x35	; 53
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);        /*_DETERMINE_ACTION_TRIGGER_THE_INTERRUPT_*/
     fc8:	85 b7       	in	r24, 0x35	; 53
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	85 bf       	out	0x35, r24	; 53
     fce:	08 95       	ret

00000fd0 <TIMER_0_INIT>:
	CLR_BIT(TCCR1B,0);
	CLR_BIT(TCCR1B,1);
	SET_BIT(TCCR1B,2);
}
void PWM_1_STOP(void)
{
     fd0:	83 b7       	in	r24, 0x33	; 51
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	83 bf       	out	0x33, r24	; 51
     fd6:	83 b7       	in	r24, 0x33	; 51
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	83 bf       	out	0x33, r24	; 51
     fdc:	8f b7       	in	r24, 0x3f	; 63
     fde:	80 68       	ori	r24, 0x80	; 128
     fe0:	8f bf       	out	0x3f, r24	; 63
     fe2:	89 b7       	in	r24, 0x39	; 57
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	89 bf       	out	0x39, r24	; 57
     fe8:	08 95       	ret

00000fea <TIMER_0_SET_TIME>:
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	a8 ee       	ldi	r26, 0xE8	; 232
     ff4:	b3 e0       	ldi	r27, 0x03	; 3
     ff6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__muluhisi3>
     ffa:	8b 01       	movw	r16, r22
     ffc:	9c 01       	movw	r18, r24
     ffe:	68 94       	set
    1000:	15 f8       	bld	r1, 5
    1002:	36 95       	lsr	r19
    1004:	27 95       	ror	r18
    1006:	17 95       	ror	r17
    1008:	07 95       	ror	r16
    100a:	16 94       	lsr	r1
    100c:	d1 f7       	brne	.-12     	; 0x1002 <TIMER_0_SET_TIME+0x18>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	07 2e       	mov	r0, r23
    1014:	7e e0       	ldi	r23, 0x0E	; 14
    1016:	b6 95       	lsr	r27
    1018:	a7 95       	ror	r26
    101a:	97 95       	ror	r25
    101c:	87 95       	ror	r24
    101e:	7a 95       	dec	r23
    1020:	d1 f7       	brne	.-12     	; 0x1016 <TIMER_0_SET_TIME+0x2c>
    1022:	70 2d       	mov	r23, r0
    1024:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <num_of_ov>
    1028:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <num_of_ov+0x1>
    102c:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <num_of_ov+0x2>
    1030:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <num_of_ov+0x3>
    1034:	d9 01       	movw	r26, r18
    1036:	c8 01       	movw	r24, r16
    1038:	80 95       	com	r24
    103a:	90 95       	com	r25
    103c:	a0 95       	com	r26
    103e:	b0 95       	com	r27
    1040:	ac 01       	movw	r20, r24
    1042:	bd 01       	movw	r22, r26
    1044:	55 27       	eor	r21, r21
    1046:	66 27       	eor	r22, r22
    1048:	77 27       	eor	r23, r23
    104a:	40 93 7f 00 	sts	0x007F, r20	; 0x80007f <initial_value>
    104e:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <initial_value+0x1>
    1052:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <initial_value+0x2>
    1056:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <initial_value+0x3>
    105a:	00 23       	and	r16, r16
    105c:	a1 f0       	breq	.+40     	; 0x1086 <TIMER_0_SET_TIME+0x9c>
    105e:	82 bf       	out	0x32, r24	; 50
    1060:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <num_of_ov>
    1064:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <num_of_ov+0x1>
    1068:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <num_of_ov+0x2>
    106c:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <num_of_ov+0x3>
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	a1 1d       	adc	r26, r1
    1074:	b1 1d       	adc	r27, r1
    1076:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <num_of_ov>
    107a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <num_of_ov+0x1>
    107e:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <num_of_ov+0x2>
    1082:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <num_of_ov+0x3>
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <TIMER_0_START>:
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	83 bf       	out	0x33, r24	; 51
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	8d 7f       	andi	r24, 0xFD	; 253
    1096:	83 bf       	out	0x33, r24	; 51
    1098:	83 b7       	in	r24, 0x33	; 51
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	83 bf       	out	0x33, r24	; 51
    109e:	08 95       	ret

000010a0 <TIMER_0_STOP>:
    10a0:	83 b7       	in	r24, 0x33	; 51
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	83 bf       	out	0x33, r24	; 51
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	8d 7f       	andi	r24, 0xFD	; 253
    10aa:	83 bf       	out	0x33, r24	; 51
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	8b 7f       	andi	r24, 0xFB	; 251
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	08 95       	ret

000010b4 <TIMER_1_INIT>:
    10b4:	8f b5       	in	r24, 0x2f	; 47
    10b6:	8e 7f       	andi	r24, 0xFE	; 254
    10b8:	8f bd       	out	0x2f, r24	; 47
    10ba:	8f b5       	in	r24, 0x2f	; 47
    10bc:	8d 7f       	andi	r24, 0xFD	; 253
    10be:	8f bd       	out	0x2f, r24	; 47
    10c0:	8e b5       	in	r24, 0x2e	; 46
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	8e bd       	out	0x2e, r24	; 46
    10c6:	8e b5       	in	r24, 0x2e	; 46
    10c8:	8f 7e       	andi	r24, 0xEF	; 239
    10ca:	8e bd       	out	0x2e, r24	; 46
    10cc:	8f b7       	in	r24, 0x3f	; 63
    10ce:	80 68       	ori	r24, 0x80	; 128
    10d0:	8f bf       	out	0x3f, r24	; 63
    10d2:	89 b7       	in	r24, 0x39	; 57
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	89 bf       	out	0x39, r24	; 57
    10d8:	08 95       	ret

000010da <TIMER_1_SET_TIME>:
    10da:	61 34       	cpi	r22, 0x41	; 65
    10dc:	2f e1       	ldi	r18, 0x1F	; 31
    10de:	72 07       	cpc	r23, r18
    10e0:	81 05       	cpc	r24, r1
    10e2:	91 05       	cpc	r25, r1
    10e4:	a8 f4       	brcc	.+42     	; 0x1110 <TIMER_1_SET_TIME+0x36>
    10e6:	a8 ee       	ldi	r26, 0xE8	; 232
    10e8:	b3 e0       	ldi	r27, 0x03	; 3
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__muluhisi3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	68 94       	set
    10f8:	15 f8       	bld	r1, 5
    10fa:	b6 95       	lsr	r27
    10fc:	a7 95       	ror	r26
    10fe:	97 95       	ror	r25
    1100:	87 95       	ror	r24
    1102:	16 94       	lsr	r1
    1104:	d1 f7       	brne	.-12     	; 0x10fa <TIMER_1_SET_TIME+0x20>
    1106:	bc 01       	movw	r22, r24
    1108:	61 50       	subi	r22, 0x01	; 1
    110a:	71 09       	sbc	r23, r1
    110c:	7b bd       	out	0x2b, r23	; 43
    110e:	6a bd       	out	0x2a, r22	; 42
    1110:	08 95       	ret

00001112 <TIMER_1_START>:
    1112:	8e b5       	in	r24, 0x2e	; 46
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	8e bd       	out	0x2e, r24	; 46
    1118:	8e b5       	in	r24, 0x2e	; 46
    111a:	8d 7f       	andi	r24, 0xFD	; 253
    111c:	8e bd       	out	0x2e, r24	; 46
    111e:	8e b5       	in	r24, 0x2e	; 46
    1120:	84 60       	ori	r24, 0x04	; 4
    1122:	8e bd       	out	0x2e, r24	; 46
    1124:	08 95       	ret

00001126 <TIMER_1_STOP>:
    1126:	8e b5       	in	r24, 0x2e	; 46
    1128:	8e 7f       	andi	r24, 0xFE	; 254
    112a:	8e bd       	out	0x2e, r24	; 46
    112c:	8e b5       	in	r24, 0x2e	; 46
    112e:	8d 7f       	andi	r24, 0xFD	; 253
    1130:	8e bd       	out	0x2e, r24	; 46
    1132:	8e b5       	in	r24, 0x2e	; 46
    1134:	8b 7f       	andi	r24, 0xFB	; 251
    1136:	8e bd       	out	0x2e, r24	; 46
    1138:	08 95       	ret

0000113a <TIMER_1_RESET>:
    113a:	1d bc       	out	0x2d, r1	; 45
    113c:	1c bc       	out	0x2c, r1	; 44
    113e:	08 95       	ret

00001140 <TIMER_2_INIT>:
}

void TIMER_2_INIT(void)
{
	
	CLR_BIT(TCCR2,3);
    1140:	85 b5       	in	r24, 0x25	; 37
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,6);
    1146:	85 b5       	in	r24, 0x25	; 37
    1148:	8f 7b       	andi	r24, 0xBF	; 191
    114a:	85 bd       	out	0x25, r24	; 37

	SET_BIT(SREG,7);    // to enable global int
    114c:	8f b7       	in	r24, 0x3f	; 63
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(TIMSK,6);   // to enable timer2 int
    1152:	89 b7       	in	r24, 0x39	; 57
    1154:	80 64       	ori	r24, 0x40	; 64
    1156:	89 bf       	out	0x39, r24	; 57
    1158:	08 95       	ret

0000115a <TIMER_2_SET_TIME>:
}
void TIMER_2_SET_TIME(u32 desired_time)
{	u32 tick_time   = 1024 / 16;   // result in micro second
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
	u32 total_ticks = ( desired_time * 1000 ) / tick_time;
    1162:	a8 ee       	ldi	r26, 0xE8	; 232
    1164:	b3 e0       	ldi	r27, 0x03	; 3
    1166:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__muluhisi3>
    116a:	8b 01       	movw	r16, r22
    116c:	9c 01       	movw	r18, r24
    116e:	68 94       	set
    1170:	15 f8       	bld	r1, 5
    1172:	36 95       	lsr	r19
    1174:	27 95       	ror	r18
    1176:	17 95       	ror	r17
    1178:	07 95       	ror	r16
    117a:	16 94       	lsr	r1
    117c:	d1 f7       	brne	.-12     	; 0x1172 <TIMER_2_SET_TIME+0x18>
	num_of_ov_2       = total_ticks / 256;
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	07 2e       	mov	r0, r23
    1184:	7e e0       	ldi	r23, 0x0E	; 14
    1186:	b6 95       	lsr	r27
    1188:	a7 95       	ror	r26
    118a:	97 95       	ror	r25
    118c:	87 95       	ror	r24
    118e:	7a 95       	dec	r23
    1190:	d1 f7       	brne	.-12     	; 0x1186 <TIMER_2_SET_TIME+0x2c>
    1192:	70 2d       	mov	r23, r0
    1194:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <num_of_ov_2>
    1198:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <num_of_ov_2+0x1>
    119c:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <num_of_ov_2+0x2>
    11a0:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <num_of_ov_2+0x3>
	initial_value   = 255 - ( total_ticks % 256 );
    11a4:	d9 01       	movw	r26, r18
    11a6:	c8 01       	movw	r24, r16
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	a0 95       	com	r26
    11ae:	b0 95       	com	r27
    11b0:	ac 01       	movw	r20, r24
    11b2:	bd 01       	movw	r22, r26
    11b4:	55 27       	eor	r21, r21
    11b6:	66 27       	eor	r22, r22
    11b8:	77 27       	eor	r23, r23
    11ba:	40 93 7f 00 	sts	0x007F, r20	; 0x80007f <initial_value>
    11be:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <initial_value+0x1>
    11c2:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <initial_value+0x2>
    11c6:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <initial_value+0x3>
	if( (total_ticks % 256) != 0 )
    11ca:	00 23       	and	r16, r16
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <TIMER_2_SET_TIME+0x9c>
	{
		TCNT2       = initial_value;
    11ce:	84 bd       	out	0x24, r24	; 36
		num_of_ov_2++;
    11d0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <num_of_ov_2>
    11d4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <num_of_ov_2+0x1>
    11d8:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <num_of_ov_2+0x2>
    11dc:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <num_of_ov_2+0x3>
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	a1 1d       	adc	r26, r1
    11e4:	b1 1d       	adc	r27, r1
    11e6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <num_of_ov_2>
    11ea:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <num_of_ov_2+0x1>
    11ee:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <num_of_ov_2+0x2>
    11f2:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <num_of_ov_2+0x3>
	}
}
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <TIMER_2_START>:
	#elif TIMER_0_PRESCALER   ==   _256
	CLR_BIT(TCCR2,0);
	CLR_BIT(TCCR2,1);
	SET_BIT(TCCR2,2);
	#elif TIMER_0_PRESCALER   ==   _1024
	SET_BIT(TCCR2,0);
    11fc:	85 b5       	in	r24, 0x25	; 37
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,1);
    1202:	85 b5       	in	r24, 0x25	; 37
    1204:	8d 7f       	andi	r24, 0xFD	; 253
    1206:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,2);
    1208:	85 b5       	in	r24, 0x25	; 37
    120a:	84 60       	ori	r24, 0x04	; 4
    120c:	85 bd       	out	0x25, r24	; 37
    120e:	08 95       	ret

00001210 <__divmodhi4>:
    1210:	97 fb       	bst	r25, 7
    1212:	07 2e       	mov	r0, r23
    1214:	16 f4       	brtc	.+4      	; 0x121a <__divmodhi4+0xa>
    1216:	00 94       	com	r0
    1218:	07 d0       	rcall	.+14     	; 0x1228 <__divmodhi4_neg1>
    121a:	77 fd       	sbrc	r23, 7
    121c:	09 d0       	rcall	.+18     	; 0x1230 <__divmodhi4_neg2>
    121e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__udivmodhi4>
    1222:	07 fc       	sbrc	r0, 7
    1224:	05 d0       	rcall	.+10     	; 0x1230 <__divmodhi4_neg2>
    1226:	3e f4       	brtc	.+14     	; 0x1236 <__divmodhi4_exit>

00001228 <__divmodhi4_neg1>:
    1228:	90 95       	com	r25
    122a:	81 95       	neg	r24
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__divmodhi4_neg2>:
    1230:	70 95       	com	r23
    1232:	61 95       	neg	r22
    1234:	7f 4f       	sbci	r23, 0xFF	; 255

00001236 <__divmodhi4_exit>:
    1236:	08 95       	ret

00001238 <__udivmodsi4>:
    1238:	a1 e2       	ldi	r26, 0x21	; 33
    123a:	1a 2e       	mov	r1, r26
    123c:	aa 1b       	sub	r26, r26
    123e:	bb 1b       	sub	r27, r27
    1240:	fd 01       	movw	r30, r26
    1242:	0d c0       	rjmp	.+26     	; 0x125e <__udivmodsi4_ep>

00001244 <__udivmodsi4_loop>:
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	ee 1f       	adc	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	a2 17       	cp	r26, r18
    124e:	b3 07       	cpc	r27, r19
    1250:	e4 07       	cpc	r30, r20
    1252:	f5 07       	cpc	r31, r21
    1254:	20 f0       	brcs	.+8      	; 0x125e <__udivmodsi4_ep>
    1256:	a2 1b       	sub	r26, r18
    1258:	b3 0b       	sbc	r27, r19
    125a:	e4 0b       	sbc	r30, r20
    125c:	f5 0b       	sbc	r31, r21

0000125e <__udivmodsi4_ep>:
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	1a 94       	dec	r1
    1268:	69 f7       	brne	.-38     	; 0x1244 <__udivmodsi4_loop>
    126a:	60 95       	com	r22
    126c:	70 95       	com	r23
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	bd 01       	movw	r22, r26
    1278:	cf 01       	movw	r24, r30
    127a:	08 95       	ret

0000127c <__tablejump2__>:
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	05 90       	lpm	r0, Z+
    1282:	f4 91       	lpm	r31, Z
    1284:	e0 2d       	mov	r30, r0
    1286:	09 94       	ijmp

00001288 <__umulhisi3>:
    1288:	a2 9f       	mul	r26, r18
    128a:	b0 01       	movw	r22, r0
    128c:	b3 9f       	mul	r27, r19
    128e:	c0 01       	movw	r24, r0
    1290:	a3 9f       	mul	r26, r19
    1292:	70 0d       	add	r23, r0
    1294:	81 1d       	adc	r24, r1
    1296:	11 24       	eor	r1, r1
    1298:	91 1d       	adc	r25, r1
    129a:	b2 9f       	mul	r27, r18
    129c:	70 0d       	add	r23, r0
    129e:	81 1d       	adc	r24, r1
    12a0:	11 24       	eor	r1, r1
    12a2:	91 1d       	adc	r25, r1
    12a4:	08 95       	ret

000012a6 <__muluhisi3>:
    12a6:	0e 94 44 09 	call	0x1288	; 0x1288 <__umulhisi3>
    12aa:	a5 9f       	mul	r26, r21
    12ac:	90 0d       	add	r25, r0
    12ae:	b4 9f       	mul	r27, r20
    12b0:	90 0d       	add	r25, r0
    12b2:	a4 9f       	mul	r26, r20
    12b4:	80 0d       	add	r24, r0
    12b6:	91 1d       	adc	r25, r1
    12b8:	11 24       	eor	r1, r1
    12ba:	08 95       	ret

000012bc <__udivmodhi4>:
    12bc:	aa 1b       	sub	r26, r26
    12be:	bb 1b       	sub	r27, r27
    12c0:	51 e1       	ldi	r21, 0x11	; 17
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <__udivmodhi4_ep>

000012c4 <__udivmodhi4_loop>:
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	a6 17       	cp	r26, r22
    12ca:	b7 07       	cpc	r27, r23
    12cc:	10 f0       	brcs	.+4      	; 0x12d2 <__udivmodhi4_ep>
    12ce:	a6 1b       	sub	r26, r22
    12d0:	b7 0b       	sbc	r27, r23

000012d2 <__udivmodhi4_ep>:
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	5a 95       	dec	r21
    12d8:	a9 f7       	brne	.-22     	; 0x12c4 <__udivmodhi4_loop>
    12da:	80 95       	com	r24
    12dc:	90 95       	com	r25
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	08 95       	ret

000012e4 <_exit>:
    12e4:	f8 94       	cli

000012e6 <__stop_program>:
    12e6:	ff cf       	rjmp	.-2      	; 0x12e6 <__stop_program>
